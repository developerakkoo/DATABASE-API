var fs = require('fs-extra')
var express = require('express')
var multer = require('multer')
var archiver = require('archiver')
var path = require('path')
require('path-join-safe')

var app = express()
var root_dir

var disk_stor = multer({
  storage: multer.diskStorage({ //create storage option via diskStorage function
    destination: function (req, file, cb) {
      cb(null, root_dir)
    },
    filename: function (req, file, cb) { //within destination
      let pathname = path.joinSafe(root_dir, req.query.path)
      console.log('post file', "'"+req.query.path+"' to '"+pathname+"'")
      fs.mkdirp(path.join(pathname, '..'))
        .then( () => cb(null, path.relative(root_dir, pathname)) )
        .catch( err => {} ) // we redirected already
    }
  })
}).array('files')


app.get('/directory', function(req, res) {
  let pathname = path.joinSafe(root_dir, req.query.path || '/')
  console.log('get directory', "'"+req.query.path+"' from '"+pathname+"'")
	fs.readdir(pathname)
    .then(files => {
      let directory = { path: req.query.path, files: [] }
      let statPromises = []
      for (let filename of files) {
        let filepath = path.join(pathname, filename)
        let statPromise = fs.stat(filepath)
          .then(stat => {
            filepath = '/' + path.relative(root_dir, filepath)
            let file = {}
            file.name = filename
            file.size = stat.size
            file.isDirectory = stat.isDirectory()
            file.href = path.posix.join(req.baseUrl, req.route.path, !file.isDirectory ? '../file' : '')
            file.href += '?path=' + filepath.replace(/\\/g, '/')
            directory.files.push(file)
          }, err => { // couldn't get stat
            filepath = '/' + path.relative(root_dir, filepath)
            let file = {}
            file.name = filename
            directory.files.push(file)
          })
        statPromises.push(statPromise)
      }
      Promise.all(statPromises)
        .then(() => res.send(directory))
    }, err => {
      res.status(404)
      res.send('error reading dir: ' + err.message)
    })
})

app.post('/directory', function(req, res) {
  let pathname = path.joinSafe(root_dir, req.query.path || '/')
  console.log('post directory', "'"+req.query.path+"' to '"+pathname+"'")
	res.redirect('/directory?path=' + encodeURIComponent(req.query.path))
  fs.mkdirp(pathname)
    .catch( err => {} )
})

app.delete('/directory', function(req, res) {
  let pathname = path.joinSafe(root_dir, req.query.path || '/')
  console.log('delete directory', "'"+req.query.path+"' from '"+pathname+"'")
  fs.stat(pathname)
    .then( stat => {
      if (!stat.isDirectory()) throw new Error('not a directory')
      return fs.remove(pathname)
        .then( () => {
          res.send('ok')
        })
    })
    .catch( err => {
      res.status(404)
      res.send('error deleting directory: ' + err.message)
    })
})

app.get('/file', function(req, res) { // as stream
  let pathname = path.joinSafe(root_dir, req.query.path || '/')
  console.log('get file', "'"+req.query.path+"' from '"+pathname+"'")
  let filename = path.basename(pathname)
  filename = encodeURI(decodeURI(filename)) //for cyrillic symbols
  res.setHeader('Content-disposition', 'attachment; filename=' + filename)
  const readStream = fs.createReadStream(pathname)
  readStream.on('error', () => {
    // console.log('error in stream')
    res.removeHeader('Content-disposition')
    res.status(500)
    res.send('error in file readStream')
  })
  readStream.pipe(res)
})

app.post('/file', disk_stor, function(req, res) { //note 'disk_stor' call
  res.send('ok')
	//res.redirect('/directory?path=' + encodeURIComponent(path.join(req.query.path, '..')))
})

app.delete('/file', function(req, res) {
  let pathname = path.joinSafe(root_dir, req.query.path || '/')
  console.log('delete file', "'"+req.query.path+"' from '"+pathname+"'")
  fs.unlink(pathname)
    .then( () => {
      res.send('ok')
    }, err => {
      res.status(404)
      res.send('error reading file: ' + err.message)
    })
})

app.get('/zip', function(req, res) {
  let pathname = path.joinSafe(root_dir, req.query.path || '/')
  console.log('get zip', "'"+req.query.path+"' from '"+pathname+"'")
  fs.stat(pathname)
    .then(stat => {
      let filename = path.basename(pathname)
      filename = encodeURI(decodeURI(filename)) //for cyrillic symbols
      res.setHeader('Content-disposition', 'attachment; filename=' + filename + '.zip')
      let archive = archiver('zip', { zlib: { level: 9 } })
      archive.on('end', () => console.log('zipped ok'))
      archive.pipe(res)
      if (stat.isDirectory()) archive.directory(pathname, filename)
      else archive.file(pathname, { name: filename })
      archive.finalize()
    }, err => {
      res.status(404)
      res.send('error reading file/dir: ' + err.message)
    })
})

module.exports = function(dir) {
	root_dir = path.resolve(process.cwd(), dir)
	return app
}
